########################
# Petr Popov Â©
########################

function getSecondaryStructureType rs
	return Sstructure(rs)
endfunction


function calculateSecondaryStructureType rs
	assign sstructure Mol(rs)
	return Sstructure(rs)
endfunction


function getMaximumResidueExposure rs
	return Area(rs type)[1]
endfunction


function getAbsoluteResidueExposure rs rs_env

	printf "\nCalculating residue exposure for %s\n", Name(rs)[1]
	
	water_radius = 1.4
	accuracy_level = 5

	set area a_//* 0.0
	show area surface rs rs_env surfaceAccuracy=accuracy_level  waterRadius=water_radius
	
	residueExposure = r_out	
	return residueExposure

endfunction


function getRelativeResidueExposure rs rs_env

	r_1 = getAbsoluteResidueExposure(rs, rs_env)
	r_2 = getMaximumResidueExposure(rs)

	return r_1/r_2

endfunction


function getResidueOrientation rs rs_env

	r_burried = 0.17
	r_exposed = 0.43

	r = getRelativeResidueExposure(rs, rs_env)
	if (r<r_burried) then
		return 0
	endif
	if (r>=r_burried) & (r<=r_exposed) then
		return 1
	endif
	if (r>r_exposed) then 
		return 2
	endif
	return -1
endfunction

function getTotalContacts rs rs_env r_contacts
	water_radius = 1.4
	accuracy_level = 5

	set area a_//* 0.0
	show area surface water_radius accuracy_level
	nb = Sphere(rs rs_env r_contacts residue)
	return Sum(Area(rs, nb)[1])
endfunction

function getTotalContactsStrengh rs rs_env r_contacts
	water_radius = 1.4
	accuracy_level = 5

	set area a_//* 0.0
	show area surface water_radius accuracy_level
	nb = Sphere(rs rs_env r_contacts residue)
	return Sum(Area(rs, nb, distance)[1])
endfunction

function getPackingDensity rs rs_env s_objName s_molName r_contacts

	objName = s_objName
	molName = s_molName

	printf "\nCalculating packing density for %s\n", Name(rs)[1]

	atoms = Sphere(rs, rs_env, r_contacts) & ! a_$objName.$molName//h*
	show volume skin atoms
	rskin = r_out
	vwExpand_tmp = vwExpand
	vwExpand = 0.
	show volume surface atoms
	rsurf = r_out
	vwExpand = vwExpand_tmp

	if (rsurf==0) then
		"Error: surface area is 0"
		return -1
	endif
	return rskin/rsurf

endfunction


function getSphericalCavityVolume rs rs_env s_objName s_molName r_contacts

	objName = s_objName
	molName = s_molName	

	water_radius = 1.4
	accuracy_level = 5

	printf "\nCalculating SphericalCavityVolume for %s\n", Name(rs)[1]

	res_vol1 = Atom(rs) & !a_$objName.$molName//h*,ca,c,n,o
	if (Name(rs)[1]=="gly") then
		res_vol1 = Atom(rs) & !a_$objName.$molName//h*
	endif

	com_sidechain =  Mean(Xyz(res_vol1))

	res_vol2 = Sphere(com_sidechain, rs_env, r_contacts) & !a_$objName.$molName//h* & !rs
	
	r_sphere = r_contacts+water_radius

	vol0 = 4.0/3.0*Pi*r_sphere *r_sphere *r_sphere 
	vol1 = r_out
	vol2 = r_out

	return (vol0 - vol1 - vol2)/vol0

endfunction

function getVolumeEnv rs rs_env s_objName s_molName r_contacts

	objName = s_objName
	molName = s_molName	

	water_radius = 1.4
	accuracy_level = 5

	printf "\nCalculating Volume occupied by %s and its neighbours \n", Name(rs)[1]

	if (Name(rs)[1]!="gly") then
		res_vol1 = Atom(rs) & !a_$objName.$molName//h*,ca,c,n,o
	else
		res_vol1 = Atom(rs) & !a_$objName.$molName//h*
	endif
	com_sidechain =  Mean(Xyz(res_vol1))

	res_vol2 = Sphere(com_sidechain, rs_env, r_contacts) & !a_$objName.$molName//h* & !rs

	res_vol = res_vol1 | res_vol2

	show grob volume skin res_vol
	vol = r_out

	return vol

endfunction

function getNhbonds rs rs_env r_contacts r_hbond


	printf "\nCalculating number of hbonds formed by %s\n", Name(rs)[1]

	atoms = Sphere(rs, rs_env, r_contacts)

	show hbond rs atoms r_hbond

	return i_out

endfunction

function getResidueContacts rs rs_env r_contacts

	lsPolar = {"asn", "gln", "thr", "ser", "tyr", "trp", "his"}
	lsPositive = {"lys", "arg"}
	lsNegative = {"asp", "glu"}
	lsHydrophobic = {"ala", "leu", "ile", "val", "met", "phe"}
	lsAromatic = {"phe", "trp", "tyr", "his"}
	lsSpecial = {"cys", "cyss", "pro", "gly"}

	printf "\nCalculating res-res contacts formed by %s \n", Name(rs)[1]

	residues = Sphere(rs, rs_env, r_contacts, residue) & !rs

	contactArray = Rarray(6, 0.0)

	for i=1,Nof(residues)
		resn = Name(residues[i])[1]
		lsRes = Sarray(resn)
		if Nof(InList(lsPolar, lsRes))!=0 then
			contactArray[1] = contactArray[1]+1.0
		endif
		if Nof(InList(lsPositive, lsRes))!=0 then
			contactArray[2] = contactArray[2]+1.0
		endif
		if Nof(InList(lsNegative, lsRes))!=0 then
			contactArray[3] = contactArray[3]+1.0
		endif
		if Nof(InList(lsHydrophobic, lsRes))!=0 then
			contactArray[4] = contactArray[4]+1.0
		endif
		if Nof(InList(lsAromatic, lsRes))!=0 then
			contactArray[5] = contactArray[5]+1.0
		endif
		if Nof(InList(lsSpecial, lsRes))!=0 then
			contactArray[6] = contactArray[6]+1.0
		endif		
	endfor

	return contactArray

endfunction

function getAtomicContacts rs rs_env s_objName s_molName

	objName = s_objName
	molName = s_molName	

	r_contacts = 5.0
	koeff = 2.0

	printf "\nCalculating atomic contacts formed by %s \n", Name(rs)[1]	

	contactArray = Rarray(10, 0.0)
	
	if (Name(rs)[1]!="gly") then
		as = Atom(rs) & !a_$objName.$molName//ca,c,n,o,h*
	else
		as = Atom(rs) & !a_$objName.$molName//h*
	endif

	for i=1,Nof(as)
		an1 = Name(as[i])[1]
		if ( an1[1]!="c" & an1[1]!="o" & an1[1]!="n" & an1[1]!="s") then
			printf "\n Warning!: unrecognized atom for atomic contacts: %s \n", an1
			show as
			show as[i]
			continue
		endif

		nb = Sphere(as[i], rs_env, r_contacts) & !Atom(rs) & !a_$objName.*//h*

		for j=1,Nof(nb)
			an2 = Name(nb[j])[1]
			if ( an2[1]!="c" & an2[1]!="o" & an2[1]!="n" & an2[1]!="s") then
				printf "\n Warning!: unrecognized atom for atomic contacts: %s \n", an2
				show nb
				show nb[j]
				continue
			endif

			d_max = (Radius(as[i])[1]+Radius(nb[j])[1])*koeff 
			d = Distance(as[i], nb[j])

			if (d>d_max) then
				continue
			endif

			if (an1[1]=="c" & an2[1]=="c") then
				contactArray[1] = contactArray[1]+1.0
			endif
			if ( (an1[1]=="c" & an2[1]=="n") | (an1[1]=="n" & an2[1]=="c") ) then
				contactArray[2] = contactArray[2]+1.0
			endif
			if ( (an1[1]=="c" & an2[1]=="o") | (an1[1]=="o" & an2[1]=="c") ) then
				contactArray[3] = contactArray[3]+1.0
			endif
			if ( (an1[1]=="c" & an2[1]=="s") | (an1[1]=="s" & an2[1]=="c") ) then
				contactArray[4] = contactArray[4]+1.0
			endif
			if (an1[1]=="n" & an2[1]=="n") then
				contactArray[5] = contactArray[5]+1.0
			endif
			if ( (an1[1]=="n" & an2[1]=="o") | (an1[1]=="o" & an2[1]=="n") ) then
				contactArray[6] = contactArray[6]+1.0
			endif
			if ( (an1[1]=="n" & an2[1]=="s") | (an1[1]=="s" & an2[1]=="n") ) then
				contactArray[7] = contactArray[7]+1.0
			endif
			if (an1[1]=="o" & an2[1]=="o") then
				contactArray[8] = contactArray[8]+1.0
			endif
			if ( (an1[1]=="o" & an2[1]=="s") | (an1[1]=="s" & an2[1]=="o") ) then
				contactArray[9] = contactArray[9]+1.0
			endif
			if (an1[1]=="s" & an2[1]=="s") then
				contactArray[10] = contactArray[10]+1.0
			endif	
		endfor
	endfor

	return contactArray
endfunction

function computeStructureBasedDescriptor rs i_opm_bool

	print "Make sure that\n 1) secondary structure is assigned\n 2) molecule is correctly named and converted"

	r_contacts = 5.0
	water_radius = 1.4
	accuracy_level = 5
	r_burried = 0.17
	r_exposed = 0.43
	r_hbond = 5.0

	featureVector = Rarray()
	r_tmp = 0.0
	s_tmp = ""

	as_sidechain = Atom(rs) & !a_*.*//ca,c,n,o
	if (Name(Res(rs))[1]=="gly") then
		as_sidechain=Atom(rs)
	endif
	as_nb = Sphere(Atom(rs), r_contacts) & !Atom(rs)
	rs_nb = Res(as_nb)
	as_nb_sidechain = Sphere(as_sidechain, r_contacts) &! Atom(rs)
	rs_nb_sidechain = Res(as_nb_sidechain) &! Res(rs)
 
	s_tmp = Sstructure(rs)
	if (s_tmp=="H") then
		featureVector = featureVector//{1,0,0,0,0,0}
	elseif (s_tmp=="G") then
		featureVector = featureVector//{0,1,0,0,0,0}
	elseif (s_tmp=="I") then
		featureVector = featureVector//{0,0,1,0,0,0}
	elseif (s_tmp=="E") then
		featureVector = featureVector//{0,0,0,1,0,0}
	elseif (s_tmp=="B") then
		featureVector = featureVector//{0,0,0,0,1,0}
	else
		featureVector = featureVector//{0,0,0,0,0,1}
	endif

	set area a_ 0.0
	show surface area rs surfaceAccuracy=accuracy_level  waterRadius=water_radius	
	r_abs = r_out
	featureVector = featureVector//r_abs
	r_max = Area(rs type)[1]
	featureVector = featureVector//r_max
	featureVector = featureVector//(r_abs/r_max)
	r_tmp = r_abs/r_max
	if (r_tmp<0 | r_tmp>1) then
		print "Bug in accessibility calculation"
		return -1
	endif

	if (r_tmp<r_burried) then
		featureVector = featureVector//{1,0,0}
	elseif ((r_tmp>=r_burried) & (r_tmp<=r_exposed)) then
		featureVector = featureVector//{0,1,0}
	else 
		featureVector = featureVector//{0,0,1}
	endif

	featureVector = featureVector//Sum(Area(rs, rs_nb)[1])
	rs_nb=Res(rs_nb)

 	featureVector = featureVector//Sum(Area(rs, rs_nb, distance)[1])
	
	set area a_ 0.0
	as_tmp = (as_nb | Atom(rs)) & ! a_*.*//h*
	show volume skin as_tmp
	rskin = r_out
	vwExpand_tmp = vwExpand
	vwExpand = 0.
	show volume surface as_tmp
	rsurf = r_out
	vwExpand = vwExpand_tmp
	if (rsurf==0) then
		"Error: surface area is 0"
		return -1
	endif
	featureVector = featureVector//(rskin/rsurf)

	show volume skin as_sidechain
	vol1 = r_out
	show volume skin as_nb_sidechain
	vol2 = r_out
	featureVector = featureVector//(vol1+vol2)

	show hbond Atom(rs) as_nb r_hbond
	featureVector = featureVector//Real(i_out)

	lsPolar = {"asn", "gln", "thr", "ser", "tyr", "his"}
	lsCharged = {"lys", "arg", "asp", "glu"}
	lsAliphatic = {"ala", "leu", "ile", "val", "met"}
	lsAromatic = {"phe", "trp", "tyr", "his"}
	lsSpecial = {"cys", "cyss", "pro", "gly"}

	contactArray = Rarray(5, 0.0)

	for i=1,Nof(rs_nb)
		S_tmp = Name(rs_nb[i])
		if Nof(InList(lsPolar, S_tmp))!=0 then
			contactArray[1] = contactArray[1]+1.0
		endif
		if Nof(InList(lsCharged, S_tmp))!=0 then
			contactArray[2] = contactArray[2]+1.0
		endif
		if Nof(InList(lsAliphatic, S_tmp))!=0 then
			contactArray[3] = contactArray[3]+1.0
		endif
		if Nof(InList(lsAromatic, S_tmp))!=0 then
			contactArray[4] = contactArray[4]+1.0
		endif
		if Nof(InList(lsSpecial, S_tmp))!=0 then
			contactArray[5] = contactArray[5]+1.0
		endif		
	endfor

	featureVector=featureVector//contactArray

	return featureVector

endfunction

########################
# Petr Popov Â©
########################
